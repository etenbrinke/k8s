#cloud-config

---
write_files:
- path: /opt/bin/waiter.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /opt/cloudstack.conf
  owner: root
  content: |
    [global]
    api-url={{ cs_api_url }}
    api-key={{ cs_api_key }}
    secret-key={{ cs_api_secret }}
    ssl-no-verify={{ cs_ssl_verify }}
- path: /srv/kubernetes/ca.crt
  owner: root
  content: |
    {{ lookup('file', 'certificates/ca.crt') | indent}}
- path: /srv/kubernetes/server.key
  owner: root
  content: |
    {{ lookup('file', 'certificates/server.key') | indent }}
- path: /srv/kubernetes/server.crt
  owner: root
  content: |
    {{ lookup('file', 'certificates/server.crt') | indent }}
- path: /srv/kubernetes/service-accounts.key
  owner: root
  content: |
    {{ lookup('file', 'certificates/service-accounts.key') | indent }}
- path: /srv/kubernetes/service-accounts.crt
  owner: root
  content: |
    {{ lookup('file', 'certificates/service-accounts.crt') | indent }}
coreos:
  units:
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd3.service
      command: start
      content: |
        [Unit]
        Description=etcd3
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/network-environment
        User=etcd
        PermissionsStartOnly=true
        ExecStartPre=/usr/bin/wget -N -P /opt https://github.com/coreos/etcd/releases/download/v3.2.1/etcd-v3.2.1-linux-amd64.tar.gz
        ExecStartPre=/bin/tar -C /opt -xzf /opt/etcd-v3.2.1-linux-amd64.tar.gz etcd-v3.2.1-linux-amd64/etcdctl etcd-v3.2.1-linux-amd64/etcd
        ExecStart=/opt/etcd-v3.2.1-linux-amd64/etcd \
        --name ${DEFAULT_IPV4} \
        --data-dir /var/lib/etcd \
        --advertise-client-urls http://${DEFAULT_IPV4}:2379 \
        --initial-advertise-peer-urls http://${DEFAULT_IPV4}:2380 \
        --listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
        --listen-peer-urls http://0.0.0.0:2380
        Restart=always
        RestartSec=10s
    - name: fleet.socket
      command: start
      content: |
        [Socket]
        ListenStream=/var/run/fleet.sock
    - name: fleet.service
      command: start
      content: |
        [Unit]
        Description=fleet daemon
        Wants=etcd3.service
        After=etcd3.service
        Wants=fleet.socket
        After=fleet.socket

        [Service]
        Environment="FLEET_ETCD_SERVERS=http://127.0.0.1:4001"
        Environment="FLEET_METADATA=role=master"
        ExecStart=/usr/bin/fleetd
        Restart=always
        RestartSec=10s
    - name: etcd-waiter.service
      command: start
      content: |
        [Unit]
        Description=etcd waiter
        Wants=network-online.target
        Wants=etcd3.service
        After=etcd3.service
        After=network-online.target
        Before=flannel.service
        Before=setup-network-environment.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/waiter.sh
        ExecStart=/usr/bin/bash /opt/bin/waiter.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flannel.service
      command: start
      content: |
        [Unit]
        Wants=etcd-waiter.service
        After=etcd-waiter.service
        Requires=etcd3.service
        After=etcd3.service
        After=network-online.target
        Wants=network-online.target
        Description=flannel is an etcd backed overlay network for containers

        [Service]
        Type=notify
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/coreos/flannel/releases/download/v0.7.0/flanneld-amd64
        ExecStartPre=/usr/bin/chmod +x /opt/bin/flanneld-amd64
        ExecStartPre=/usr/bin/etcdctl mk /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
        ExecStart=/opt/bin/flanneld-amd64
    - name: kubernetes-installer.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Installer
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd3.service
        After=etcd3.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt https://dl.k8s.io/{{ k8s_version }}/kubernetes-server-linux-amd64.tar.gz
        ExecStart=/bin/true
        RemainAfterExit=yes
        Type=oneshot
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd3.service
        After=etcd3.service
        Requires=kubernetes-installer.service
        After=kubernetes-installer.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/bin/tar -xvzf /opt/kubernetes-server-linux-amd64.tar.gz -C /opt kubernetes/server/bin/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/kubernetes/server/bin/kube-apiserver
        ExecStart=/opt/kubernetes/server/bin/kube-apiserver \
        --address=0.0.0.0 \
        --port=8080 \
        --portal_net=10.244.0.0/16 \
        --etcd_servers=http://127.0.0.1:4001 \
        --public_address_override=$private_ipv4 \
        --logtostderr=true \
        --cloud-provider=external \
        --client-ca-file=/srv/kubernetes/ca.crt \
        --tls-cert-file=/srv/kubernetes/server.crt \
        --tls-private-key-file=/srv/kubernetes/server.key \
        --service-account-key-file=/srv/kubernetes/service-accounts.crt \
        -v 2
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service 
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/bin/tar -xvzf /opt/kubernetes-server-linux-amd64.tar.gz -C /opt kubernetes/server/bin/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/kubernetes/server/bin/kube-controller-manager
        ExecStart=/opt/kubernetes/server/bin/kube-controller-manager \
        --master=127.0.0.1:8080 \
        --service-account-private-key-file=/srv/kubernetes/service-accounts.key \
        --root-ca-file=/srv/kubernetes/ca.crt \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/bin/tar -xvzf /opt/kubernetes-server-linux-amd64.tar.gz -C /opt kubernetes/server/bin/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/kubernetes/server/bin/kube-scheduler
        ExecStart=/opt/kubernetes/server/bin/kube-scheduler --master=127.0.0.1:8080
        Restart=always
        RestartSec=10
    - name: cloud-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Cloud Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/bin/tar -xvzf /opt/kubernetes-server-linux-amd64.tar.gz -C /opt kubernetes/server/bin/cloud-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/kubernetes/server/bin/cloud-controller-manager
        ExecStart=/opt/kubernetes/server/bin/cloud-controller-manager \
        --cloud-provider=cloudstack \
        --cloud-config=/opt/cloudstack.conf \
        --master=http://127.0.0.1:8080
        Restart=always
        RestartSec=10
    - name: kube-register.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Registration Service
        Documentation=https://github.com/kelseyhightower/kube-register
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        Requires=fleet.service
        After=fleet.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/kube-register
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register
        ExecStart=/opt/bin/kube-register \
        --metadata=role=node \
        --fleet-endpoint=unix:///var/run/fleet.sock \
        --api-endpoint=http://127.0.0.1:8080
        Restart=always
        RestartSec=10
  update:
    group: alpha
    reboot-strategy: off
